{"version":3,"sources":["characters.js","CharacterSelect.js","Chat.js","App.js","reportWebVitals.js","index.js"],"names":["chars","name","nickname","img","description","CharacterSelect","select","Grid","sx","m","textAlign","mb","Typography","variant","color","container","spacing","map","c","i","item","xs","sm","lg","Card","CardActionArea","onClick","CardContent","pt","position","backgroundImage","backgroundSize","backgroundRepeat","component","pb","Chat","person","clearPerson","useState","loading","setLoading","text","setText","dialog","setDialog","apiKey","process","console","log","callChatGpt","_text","data","JSON","stringify","prompt","max_tokens","n","headers","Authorization","fetch","method","body","then","resp","json","jsonResp","user","choices","speechSynthesis","paused","speaking","resume","utterance","SpeechSynthesisUtterance","rate","lang","speak","speechText","catch","error","direction","alignItems","justifyContent","ml","mt","d","style","OutlinedInput","border","width","placeholder","onKeyDown","e","keyCode","target","value","keyPress","type","onChange","endAdornment","IconButton","App","setPerson","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kQAAaA,EAAQ,CACjB,CACIC,KAAM,gBACNC,SAAU,QACVC,IAAK,mFACLC,YAAa,6MAEjB,CACIH,KAAM,6BACNC,SAAU,eACVC,IAAK,0FACLC,YAAa,sOAEjB,CACIH,KAAM,sBACNC,SAAU,cACVC,IAAK,yFACLC,YAAa,6NAEjB,CACIH,KAAM,8BACNC,SAAU,YACVC,IAAK,uFACLC,YAAa,qLAEjB,CACIH,KAAM,4BACNC,SAAU,YACVC,IAAK,oFACLC,YAAa,iMAEjB,CACIH,KAAM,2BACNC,SAAU,2BACVC,IAAK,yFACLC,YAAa,mMAEjB,CACIH,KAAM,yBACNC,SAAU,OACVC,IAAK,kFACLC,YAAa,6O,OClCN,SAASC,EAAT,GAAoC,IAAVC,EAAS,EAATA,OAEvC,OACE,eAACC,EAAA,EAAD,CAAMC,GAAI,CAACC,EAAG,GAAd,UACI,eAACF,EAAA,EAAD,CAAMG,UAAW,SAAUF,GAAI,CAACG,GAAI,GAApC,UACE,cAACC,EAAA,EAAD,CAAYC,QAAQ,KAAKC,MAAO,QAAhC,gCACA,cAACF,EAAA,EAAD,CAAYC,QAAQ,KAAKC,MAAO,QAAhC,gDAEF,cAACP,EAAA,EAAD,CAAMQ,WAAS,EAACC,QAAS,EAAzB,SAEQhB,EAAMiB,KAAI,SAACC,EAAGC,GACd,OAAO,cAACZ,EAAA,EAAD,CAAca,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAGC,GAAI,EAAtC,SACH,cAACC,EAAA,EAAD,UACI,cAACC,EAAA,EAAD,CAAgBC,QAAS,kBAAMpB,EAAOY,IAAtC,SACI,eAACS,EAAA,EAAD,CACQnB,GAAI,CACAoB,GAAI,QACJC,SAAU,WACVC,gBAAgB,4JAAD,OAA8JZ,EAAEf,IAAhK,KACf4B,eAAgB,QAChBC,iBAAkB,YAClBtB,UAAW,WAPvB,UAUI,cAACE,EAAA,EAAD,CAAYqB,UAAU,MAAMzB,GAAI,CAAC0B,GAAI,OAArC,SACKhB,EAAEjB,OAEP,cAACW,EAAA,EAAD,CAAYC,QAAQ,OAAOC,MAAM,iBAAiBN,GAAI,CAACM,MAAO,QAASL,EAAG,UAA1E,SACKS,EAAEd,sBAjBLe,W,gECbnB,SAASgB,EAAT,GAAsC,IAAvBC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,YAAc,EAClBC,oBAAS,GADS,mBACzCC,EADyC,KAChCC,EADgC,OAExBF,mBAAS,IAFe,mBAEzCG,EAFyC,KAEnCC,EAFmC,OAGpBJ,mBAAS,IAHW,mBAGzCK,EAHyC,KAGjCC,EAHiC,KAM1CC,EAASC,sDACfC,QAAQC,IAAI,SAAUH,GAEtB,IAcMI,EAAc,SAACC,GACjBV,GAAW,GAEX,IAAMW,EAAOC,KAAKC,UAAU,CAC1BC,OAAO,GAAD,OAAKJ,EAAL,gCAAkCd,EAAOlC,SAAzC,mCACNqD,WAAY,IACZC,EAAG,IAKCC,EAAU,CACZ,eAAgB,mBAChBC,cAAc,UAAD,OAAYb,IAI7Bc,MAAM,qCAAD,OAAsC,mBAAtC,gBAAwE,CAC3EC,OAAQ,OACRH,UACAI,KAAMV,IAEPW,MAAK,SAACC,GAAD,OAAUA,EAAKC,UACpBF,MAAK,SAACG,GAEHrB,GAAU,SAACD,GAAD,4BAAgBA,GAAhB,CAAwB,CAACuB,KAAM,EAAGzB,KAAMS,QAClDN,GAAU,SAACD,GAAD,4BAAgBA,GAAhB,CAAwB,CAACuB,KAAM,EAAGzB,KAAMwB,EAASE,QAAQ,GAAG1B,WACtEC,EAAQ,IACRF,GAAW,GA1CA,SAACC,GAChB,GAAI2B,gBAAgBC,QAAUD,gBAAgBE,SAC1C,OAAOF,gBAAgBG,SAE3B,IAAIH,gBAAgBE,SAApB,CACA,IAAME,EAAY,IAAIC,yBACtBD,EAAU/B,KAAOA,EACjB+B,EAAUE,KAAO,EACjBF,EAAUG,KAAO,QAGjBP,gBAAgBQ,MAAMJ,IAgClBK,CAAWZ,EAASE,QAAQ,GAAG1B,SAElCqC,OAAM,SAACC,GAAD,OAAWhC,QAAQgC,MAAMA,OAUpC,OAAO,eAACxE,EAAA,EAAD,CACHQ,WAAS,EACTiE,UAAU,SACVC,WAAW,SACXzE,GAAI,CACA0E,eAAgB,gBAChBD,WAAY,UACZlD,eAAgB,QAChBC,iBAAkB,YAClBF,gBAAgB,iFAAD,OAAmFM,EAAOjC,IAA1F,MAThB,UAYH,cAACI,EAAA,EAAD,CAAMa,MAAI,EAAV,SACI,eAACb,EAAA,EAAD,CAAMQ,WAAS,EAACkE,WAAW,SAA3B,UACI,cAAC1E,EAAA,EAAD,CAAMa,MAAI,EAACC,GAAI,EAAGK,QAAS,kBAAMW,KAAjC,SACI,cAAC,IAAD,CAAe7B,GAAI,CAACM,MAAO,QAASqE,GAAI,EAAGC,GAAI,OAEnD,cAAC7E,EAAA,EAAD,CAAMa,MAAI,EAACC,GAAI,EAAf,SAAkB,cAACT,EAAA,EAAD,CAAYC,QAAQ,KAAKC,MAAO,QAAhC,SAA0CsB,EAAOlC,kBAG3E,cAACK,EAAA,EAAD,CAAMa,MAAI,EAAV,SACI,8BACCuB,EAAO1B,KAAI,SAACoE,EAAGlE,GAAJ,OAAU,qBAAamE,MAAO,CAACxE,OAAQ,OAADuE,QAAC,IAADA,OAAA,EAAAA,EAAGnB,MAAO,OAAS,SAA/C,SAA0DmB,EAAE5C,MAAlDtB,UAGpC,cAACZ,EAAA,EAAD,CAAMa,MAAI,EAAV,SACKmB,GAAW,+CAEhB,cAAChC,EAAA,EAAD,CAAMa,MAAI,EAAV,SACI,cAACmE,EAAA,EAAD,CACA/E,GAAI,CAACM,MAAO,QAAS0E,OAAQ,kBAAmBC,MAAO,MAAOhF,EAAG,GACjEiF,YAAa,kBACbC,UAAW,SAACC,GAAD,OAvCF,SAACA,GACI,KAAdA,EAAEC,UACFnD,EAAQkD,EAAEE,OAAOC,OACjB9C,EAAY2C,EAAEE,OAAOC,QAoCHC,CAASJ,IAC3BK,KAAK,OACLF,MAAOtD,EACPyD,SAAU,SAACN,GACPlD,EAAQkD,EAAEE,OAAOC,QAEjBI,aACI,cAACC,EAAA,EAAD,CAAY1E,QAAS,WACjBuB,EAAYR,IADhB,SAGJ,cAAC,IAAD,CAAUjC,GAAI,CAACM,MAAO,oBC9FvBuF,MAZf,WAAgB,IAAD,EAEe/D,qBAFf,mBAENF,EAFM,KAEEkE,EAFF,KAIb,OACE,sBAAKC,UAAU,MAAf,WACMnE,GAAU,cAAC/B,EAAD,CAAiBC,OAAQ,SAACY,GAAD,OAAOoF,EAAUpF,MACrDkB,GAAU,cAACD,EAAD,CAAMC,OAAQA,EAAQC,YAAa,kBAAMiE,EAAU,aCAvDE,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqB5C,MAAK,YAAkD,IAA/C6C,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.a57603f6.chunk.js","sourcesContent":["export const chars = [\n    {\n        name: 'Sigmund Freud',\n        nickname: 'Freud',\n        img: 'https://raw.githubusercontent.com/alisonborba/freudexplica/main/public/freud.jpg',\n        description: 'Neurologista, psiquiatra austríaco, criador da psicanálise e a personalidade mais influente da história no campo da psicologia. A influência dele pode ser observada hoje na cultura popular.'\n    },\n    {\n        name: 'Madre Teresa de Calcutá',\n        nickname: 'Madre Teresa',\n        img: 'https://raw.githubusercontent.com/alisonborba/freudexplica/main/public/madre-teresa.jpg',\n        description: 'Religiosa católica de etnia albanesa naturalizada indiana, fundadora da congregação das Missionárias da Caridade, cujo carisma é o serviço aos mais pobres por meio da vivência do Evangelho de Jesus Cristo.'\n    },\n    {\n        name: 'William Shakespeare',\n        nickname: 'Shakespeare',\n        img: 'https://raw.githubusercontent.com/alisonborba/freudexplica/main/public/shakespeare.jpg',\n        description: 'Poeta, dramaturgo e ator inglês, tido como o maior escritor do idioma inglês e o mais influente dramaturgo do mundo. Seus textos e temas permanecem vivos até hoje no teatro, televisão, cinema e literatura.'\n    },\n    {\n        name: 'Friedrich Wilhelm Nietzsche',\n        nickname: 'Nietzsche',\n        img: 'https://raw.githubusercontent.com/alisonborba/freudexplica/main/public/nietzsche.jpg',\n        description: 'Filósofo, crítico cultural, poeta, compositor e Alemão. Escreveu vários textos criticando a religião, a moral, a cultura contemporânea, filosofia e ciência.'\n    },\n    {   \n        name: 'Arístocles (Platão)',\n        nickname: 'Platão',\n        img: 'https://raw.githubusercontent.com/alisonborba/freudexplica/main/public/platao.jpg',\n        description: 'Filósofo e matemático grego, autor de diversos diálogos filosóficos e fundador da Academia em Atenas, a primeira instituição de educação superior do mundo ocidental.'\n    },\n    {\n        name: 'Imperador Júlio Cesar',\n        nickname: 'Imperador Júlio Cesar',\n        img: 'https://raw.githubusercontent.com/alisonborba/freudexplica/main/public/julio-cesar.jpg',\n        description: 'Líder militar e político romano. Desempenhou um papel crítico na transformação da república Romana para império. É considerado um dos maiores militares da história.'\n    },\n    {\n        name: 'Sidarta Gautama (Buda)',\n        nickname: 'Buda',\n        img: 'https://raw.githubusercontent.com/alisonborba/freudexplica/main/public/buda.jpg',\n        description: 'Príncipe de uma região no sul do atual Nepal que renunciou o trono e se dedicou à busca da erradicação das causas do sofrimento humano e de todos os seres, se tornou mestre ou professor espiritual, fundando o budismo.'\n    }\n]","import * as React from 'react';\nimport Card from '@mui/material/Card';\nimport CardContent from '@mui/material/CardContent';\nimport Typography from '@mui/material/Typography';\nimport { CardActionArea, Grid } from '@mui/material';\nimport { chars } from './characters'\n\nexport default function CharacterSelect({select}) {\n\n  return (\n    <Grid sx={{m: 2}}>\n        <Grid textAlign={'center'} sx={{mb: 2}}>\n          <Typography variant='h4' color={'white'}>Qual voce escolhe?</Typography>\n          <Typography variant='h6' color={'white'}>Esolha um para blah blha blah..</Typography>\n        </Grid>\n        <Grid container spacing={2}>\n            {\n                chars.map((c, i) => {\n                return <Grid key={i} item xs={12} sm={4} lg={2}>\n                    <Card>\n                        <CardActionArea onClick={() => select(c)}>\n                            <CardContent\n                                    sx={{\n                                        pt: '200px',\n                                        position: 'relative',\n                                        backgroundImage: `linear-gradient(to bottom, rgba(255, 255, 255, 0),rgba(255, 255, 255, 0), rgba(255, 255, 255, 0), rgba(255, 255, 255, 0.8), rgba(255, 255, 255, 1)), url(${c.img})`,\n                                        backgroundSize: 'cover',\n                                        backgroundRepeat: 'no-repeat',\n                                        textAlign: 'justify'\n                                    }}\n                                >\n                                <Typography component=\"div\" sx={{pb: '5px'}}>\n                                    {c.name}\n                                </Typography>\n                                <Typography variant=\"body\" color=\"text.secondary\" sx={{color: 'black', m: '10px 0'}}>\n                                    {c.description}\n                                </Typography>\n                            </CardContent>\n                        </CardActionArea>\n                    </Card>\n                </Grid>\n                })\n            }\n        </Grid>\n    </Grid>\n  );\n}\n","import { useState } from \"react\";\nimport { Grid, IconButton, OutlinedInput, Typography } from '@mui/material';\nimport SendIcon from '@mui/icons-material/Send';\nimport ArrowBackIcon from '@mui/icons-material/ArrowBack';\n\nexport default function Chat({person, clearPerson}) {\n    const [loading, setLoading] = useState(false);\n    const [text, setText] = useState('');\n    const [dialog, setDialog] = useState([]);\n\n    // Substitua \"sua-chave-de-api-aqui\" pela sua chave de API real\n    const apiKey = process.env.REACT_APP_CHATGPT_KEY\n    console.log('apiKey', apiKey)\n    \n    const speechText = (text) => {\n        if (speechSynthesis.paused && speechSynthesis.speaking) {\n            return speechSynthesis.resume()\n        }\n        if (speechSynthesis.speaking) return\n        const utterance = new SpeechSynthesisUtterance()\n        utterance.text = text\n        utterance.rate = 1\n        utterance.lang = \"pt-BR\";\n        // utterance.voice = voices[0];\n        // textInput.disabled = true\n        speechSynthesis.speak(utterance)\n    }\n\n    const callChatGpt = (_text) => {\n        setLoading(true);\n        // Corpo da solicitação HTTP\n        const data = JSON.stringify({\n          prompt: `${_text}. Fale como se fosse ${person.nickname} e resuma em apenas 70 palavras`,\n          max_tokens: 200,\n          n: 1,\n          // stop: \".\"\n        });\n\n        // Cabeçalhos HTTP para enviar com a solicitação\n        const headers = {\n            \"Content-Type\": \"application/json\",\n            Authorization: `Bearer ${apiKey}`,\n        };\n    \n        // Envie a solicitação HTTP para a API do OpenAI\n        fetch(`https://api.openai.com/v1/engines/${'text-davinci-003'}/completions`, {\n          method: \"POST\",\n          headers,\n          body: data,\n        })\n        .then((resp) => resp.json())\n        .then((jsonResp) => {\n            // Imprima a resposta do ChatGPT\n            setDialog((dialog) => [...dialog, {user: 1, text: _text}]);\n            setDialog((dialog) => [...dialog, {user: 0, text: jsonResp.choices[0].text}]);\n            setText('');\n            setLoading(false);\n            speechText(jsonResp.choices[0].text)\n        })\n        .catch((error) => console.error(error));\n    };\n\n    const keyPress = (e) => {\n        if (e.keyCode === 13) {\n            setText(e.target.value);\n            callChatGpt(e.target.value);\n        }\n    };\n\n    return <Grid\n        container\n        direction=\"column\"\n        alignItems=\"center\"\n        sx={{\n            justifyContent: 'space-between',\n            alignItems: 'stretch',\n            backgroundSize: 'cover',\n            backgroundRepeat: 'no-repeat',\n            backgroundImage: `linear-gradient(to bottom, rgba(40, 44, 53, 0.9), rgba(40, 44, 53, 0.9)), url(${person.img})`,\n            }}\n        >\n        <Grid item>\n            <Grid container alignItems=\"center\" >\n                <Grid item xs={4} onClick={() => clearPerson()}>\n                    <ArrowBackIcon sx={{color: 'white', ml: 2, mt: 2}}/>\n                </Grid>\n                <Grid item xs={6}><Typography variant='h4' color={'white'}>{person.nickname}</Typography></Grid>\n            </Grid>\n        </Grid>\n        <Grid item>\n            <div>\n            {dialog.map((d, i) => <div key={i} style={{color: d?.user ? 'grey' : 'white'}}>{d.text}</div> )}\n            </div>\n        </Grid>\n        <Grid item>\n            {loading && <div>Loading...</div>}\n        </Grid>\n        <Grid item>\n            <OutlinedInput\n            sx={{color: 'white', border: '2px solid white', width: '98%', m: 1}}\n            placeholder={'escreva aqui...'}\n            onKeyDown={(e) => keyPress(e)}\n            type=\"text\"\n            value={text}\n            onChange={(e) => {\n                setText(e.target.value);\n                }}\n                endAdornment={\n                    <IconButton onClick={() => {\n                        callChatGpt(text);\n                    }}>\n                <SendIcon sx={{color: 'white'}}/>\n                </IconButton>\n            }\n            />\n        </Grid>\n    </Grid>\n}\n","import { useState } from \"react\";\nimport \"./App.css\";\nimport CharacterSelect from './CharacterSelect.js';\nimport Chat from './Chat.js';\n\nfunction App() {\n\n  const [person, setPerson] = useState();\n\n  return (\n    <div className=\"App\">\n        {!person && <CharacterSelect select={(c) => setPerson(c)}/> }\n        {person && <Chat person={person} clearPerson={() => setPerson(null)}/> }\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}